name: Azure Pipelines
- task: TerraformInstaller@2
  inputs:
    terraformVersion: '1.5.7'

trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
pool: myAgentPool

variables:
  # python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'Azuredevops'

# stages:
# - stage: Build
#  jobs:
#  - job: BuildInfrastructure
steps:
    # Install Terraform on the pipeline agent 
- task: TerraformTaskV4@0
  displayName: 'Terrafom installation'
  inputs:
    terraformVersion: '1.5.7'

- checkout: self
  displayName: 'Checkout repo'
  
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
- task: myDevOpsTask@1.5.7
  displayName: 'Terrafom init'
  inputs:
    provider: 'azurerm'
    command: 'init'
<<<<<<< HEAD
- task: TerraformCLI@2
  inputs:
    command: 'init'
    allowTelemetryCollection: true
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test)'
=======
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test)'
>>>>>>> 077c700 (p3 devOps push)
    backendServiceArm: '$(azureServiceConnectionId)'
    backendAzureRmResourceGroupName: 'Azuredevops'
    backendAzureRmStorageAccountName: '/subscriptions/44ada2e4-89f9-41cc-8efc-3cf76cd05c0c/resourceGroups/Azuredevops/providers/Microsoft.Storage/storageAccounts/mydevopsblob'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    #- task: odluser248927.azure-pipelines-tasks-terraform.azure-piplines-tasks-terraform-installer.TerraformTaskV3@3
- task: myDevOpsTask.azure-pipelines-tasks-terraform.azure-piplines-tasks-terraform-cli.TerraformCLI@1.5.7 
  displayName: Terraform validate
  inputs:
    provider: 'azurerm'
    command: 'validate'
<<<<<<< HEAD
- task: TerraformCLI@2
  inputs:
    command: 'validate'
    allowTelemetryCollection: true
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test)'

- task: TerraformTaskV3@3
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
- task: TerraformCLI@2
  inputs:
    command: 'apply'
    environmentServiceName: 'myServiceConnection'
    providerAzureRmSubscriptionId: 'e2c7cd99-c3c5-4a90-9109-02e7d50f8311'
    allowTelemetryCollection: true
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test)'
    commandOptions: '-out=tfplan'

- task: TerraformTaskV3@3
  displayName: 'Terraform apply'
=======

    
    # erraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
- task: myDevOpsTask.azure-pipelines-tasks-terraform.azure-piplines-tasks-terraform-cli.TerraformCLI@1.5.7
  displayName: Terraform apply
>>>>>>> 077c700 (p3 devOps push)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test)'
    environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure
    # ToDo: Change the workingDirectory path, as applicable to you
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)' 
