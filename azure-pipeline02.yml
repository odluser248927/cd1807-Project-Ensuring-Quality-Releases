

trigger:
- main

variables:
  azureServiceConnectionId: 'myServiceConnection'
  System.Debug: true 

  vmImageName: 'ubuntu-latest'
  environmentName: 'mydevopsagentvm'

  
  projectRoot: '$(System.DefaultWorkingDirectory)/'
  

stages:
- stage: 'Build'
  displayName: 'Build stage'
  jobs:
  - job: 'Build'
    pool: myAgentPool
    steps:
        
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
        
    - task: TerraformTaskV3@3
      displayName: 'init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendType: 'azurerm'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
        backendAzureRmContainerName: 'tfstate'
        #backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        commandOptions: '-backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'

    - task: TerraformTaskV3@3
      displayName: 'Terrafom validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        
    - task: ArchiveFiles@1
      displayName: "Archiving from local env to cloud env."
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        includeRootFolder: true
        archiveType: 'tar'
        archiveFile: '$(BuildArtifactStagingDirectory)/build.tar.gz'
        
    - task: CopyFiles@2
      displayName: "Deploying IaaC from local env to cloud env."
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        Contents: |
          **
          **/*.tf
          **/*.tfvars
          **/*tfplan*

        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'
        
     # Publish Artifacts:
    - task: PublishBuildArtifacts@1
      displayName: 'PUBLISH ARTIFACTS'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'
        artifactName: '$(Artifact)'
        publishLocation: 'Container'
        
    # deploymentStage:
- stage: Deploy
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: DeploymentJob
    pool: myAgentPool
    environment: 'mydevopsagentvm'
    strategy:
      
      runOnce:        
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Terrafom installation'
            inputs:
              terraformVersion: 'latest'
              
          - script: |
             terraform --version             

          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts for deployment.'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactname: '$(Artifact)'
              addSpnToEnvironment: true
              downloadPath: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'

          - task: CmdLine@2
            displayName: 'Copy terraform.tfvars to local working directory'
            inputs:
              script: |                
                cp -r '$(Agent.TempDirectory)/' '$(Build.ArtifactStagingDirectory)/'
                cp -r '$(Agent.TempDirectory)/' '/home/devopsagent/myagent/_work/_tool/terraform/'

          - task: Bash@3
            displayName: "import test:"
            inputs:
              provider: 'azurerm'
              backendServiceArm: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              commandOptions: '-lock=false -auto-approve -var-file="$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars"'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              targetType: 'inline'
              script: |
                terraform import azurerm_resource_group.Azuredevops \ "/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops" \
                terraform --version \
                terraform import -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars" \

          - task: TerraformTaskV3@3
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              backendAzureRmContainerName: 'tfstate'
              commandOptions: '-reconfigure -lock=false -backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'
              backendAzureRmKey: 'terraform.tfstate'                        
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'              

          - task: TerraformTaskV3@3
            displayName: 'Terrafom plan'
            inputs:
              command: 'plan'
              environmentServiceNameAzureRM: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              backendAzureRmContainerName: 'tfstate'
              commandOptions: '-lock=false -input=false -out="mydevopsdeployment03.plan" -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars"'
              backendType: 'azurerm'
              backendAzureRmKey: 'terraform.tfstate'              
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'              
                
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: 'Terrafom apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              addSpnToEnvironment: true
              environmentServiceNameAzureRM: 'myServiceConnection'
              commandOptions: '-auto-approve -lock=false -input=false -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars"'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
          
          - task: CmdLine@2
            displayName: "newman install"
            continueOnError: true
            inputs:        
            script: |
              #'sudo apt-get install npm'
              'sudo npm install -g newman'
              WorkingDirectory: '/home/devopsagent/myagent/externals/node10/bin/node'
              #WorkingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: CmdLine@2
            condition: succeededOrFailed()
            displayName: "regression check"
            WorkingDirectory: '$(System.DefaultWorkingDirectory)/'
            continueOnError: true
            inputs:
              script: 'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export junitReport.xml'        
              



