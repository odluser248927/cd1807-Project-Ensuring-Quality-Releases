

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'myServiceConnection'
  # System.Debug: true 

  # Web app name
  # webAppName: 'mywebapp248927'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'mydevopsagentvm'

  # Project root folder. Point to the folder containing manage.py file.
  # projectRoot: $(System.DefaultWorkingDirectory)
  projectRoot: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

  # Python version: 3.9
  # pythonVersion: '3.9'

stages:
- stage: 'Build'
  displayName: 'Build stage'
  jobs:
  - job: 'Build'
    pool: myAgentPool
    steps:
    # - task: Docker@2
    #   displayName: 'build and push'
    #   inputs:
    #     command: docker build -t terraform-docker
    #     buildContext: $(Build.Repository.LocalPath)
    #     dockefile: $(Build.SourceDirectory)
        # containerRegistry: 'Container Registry Connection'
        
    # - script: |
    #     # Get Azure account details
    #     echo "==> Setting Subscription environment variables"
    #     if [[ ! -z "${servicePrincipalId:-}" ]]; then
    #       SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
    #       TENANT_ID=$(az account show --query 'tenantId' --output tsv)
    #       CLIENT_ID=${servicePrincipalId:-}
    #       CLIENT_SECRET=${servicePrincipalKey:-}
    #     else
    #       SUBSCRIPTION_ID="64b5de4c-738a-488c-9d2c-0a702a6d086a"
    #       TENANT_ID="6b6c018c-f2e6-48d8-b64f-4cd02807e329"
    #       CLIENT_ID="ae725b36-42c2-45c0-9ba0-6048b7e9be83"
    #       CLIENT_SECRET="Uab8Q~bUxolUL~wPY_4YP1-n9WO1BjXnRftLqcXZ"
    #     fi

    #     # Define environment variables
    #     export ARM_SUBSCRIPTION_ID=${ARM_SUBSCRIPTION_ID:-$SUBSCRIPTION_ID} \
    #       ARM_TENANT_ID=${ARM_TENANT_ID:-$TENANT_ID} \
    #       ARM_CLIENT_ID=${ARM_CLIENT_ID:-$CLIENT_ID} \
    #       ARM_CLIENT_SECRET=${ARM_CLIENT_SECRET:-$CLIENT_SECRET}

    #     terraform init
    #     python -m venv mypy3env
    #     source /mypy3env/bin/activate
    #     python -m pip install --upgrade pip
    #     pip install setup
    #     pip install -r requirements.txt
    #   # workingDirectory: '${System.DefaultWorkingDirectory}'
    #   # workingDirectory: $(projectRoot)
    #   displayName: "Install requirements"

    - task: CmdLine@2
      continueOnError: true
      displayName: "Run commands"
      inputs:
        script: |           
          #export PATH=$HOME/.local/bin:$PATH
          #make install
          # Get Azure account details
          echo "==> Setting Subscription environment variables"
          if [[ ! -z "${servicePrincipalId:-}" ]]; then
            SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
            TENANT_ID=$(az account show --query 'tenantId' --output tsv)
            CLIENT_ID=${servicePrincipalId:-}
            CLIENT_SECRET=${servicePrincipalKey:-}
          else
            SUBSCRIPTION_ID="64b5de4c-738a-488c-9d2c-0a702a6d086a"
            TENANT_ID="6b6c018c-f2e6-48d8-b64f-4cd02807e329"
            CLIENT_ID="ae725b36-42c2-45c0-9ba0-6048b7e9be83"
            CLIENT_SECRET="Uab8Q~bUxolUL~wPY_4YP1-n9WO1BjXnRftLqcXZ"
          fi

          # Define environment variables
          # export ARM_SUBSCRIPTION_ID=${ARM_SUBSCRIPTION_ID:-$SUBSCRIPTION_ID} \
          #   ARM_TENANT_ID=${ARM_TENANT_ID:-$TENANT_ID} \
          #   ARM_CLIENT_ID=${ARM_CLIENT_ID:-$CLIENT_ID} \
          #   ARM_CLIENT_SECRET=${ARM_CLIENT_SECRET:-$CLIENT_SECRET}

    # - task: CopyFiles@2
    #   displayName: "Deploying IaaC from local env to cloud env."
    #   inputs:
    #     #SourceFolder: '$(Pipeline.Workspace)/dropScripts'
    #     SourceFolder: $(projectRoot)
    #     Contents: '**'
    #     #TargetFolder: '$(Agent.TempDirectory)'
    #     OverWrite: true
    #     #Contents: '../../terraform/**'
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)'

    #- checkout: self
    # - task: ArchiveFiles@2
    #   displayName: 'Archive files'
    #   inputs:
    #     rootFolderOrFile: $(projectRoot)
    #     # rootFolderOrFile: '${System.DefaultWorkingDirectory}'
    #     includeRootFolder: false
    #     archiveType: zip
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    #     replaceExistingArchive: true

    # - upload: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    #   displayName: 'Upload package'
    #   artifact: drop

    # - task: AzureWebApp@1
    #   displayName: 'runWebApp'
    #   inputs:
    #     rootFolderOrFile: $(projectRoot)
    #     # rootFolderOrFile: '${System.DefaultWorkingDirectory}'
    #     command:
    #     # 'az webapp up --runtime PYTHON:3.9 --sku B1s --logs --name mywebapp248927 --resource-group azuredevops'
    #      'az webapp up --name myWebApp248927 --resource-group Azuredevops --sku F1s --logs --runtime PYTHON:3.9'
        
#    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        #terraformVersion: '1.5.7'
        terraformVersion: 'latest'
    # - bash: ls $(terraform-working-directory)
    # - task: AzureCLI@1
#      displayName: Terraform init
#    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@1
#    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1

#     - task: TerraformTaskV3@3
#       displayName: refresh
# #    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
# #    - task: TerraformTaskV2@2
#       inputs:
#         provider: 'azurerm'
#         command: 'refresh'
#         # commandOptions: 'init'
        
    - task: TerraformTaskV3@3
      displayName: init
#    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
#    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        # commandOptions: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendType: azurerm 
        # backendServiceArm: '$(azureServiceConnectionId)'
        # backendAzureRmContainerName: '${{ parameters.backendcontainername }}'
        backendServiceArm: 'myServiceConnection'
        # backendServiceArm: 'Azure subscription 1 (64b5de4c-738a-488c-9d2c-0a702a6d086a)'
        # backendAzureRmSubscriptionId: '64b5de4c-738a-488c-9d2c-0a702a6d086a'
        backendAzureRmResourceGroupName: 'Azuredevops'
        # backendAzureRmStorageAccountName: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops/providers/Microsoft.Storage/storageAccounts/mydevopsdemoblob'
        backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        # backendAzureRmKey: 'SuLBd1YGQF4aMCukZa7CMlRBKCydv7alo8CMRPJl6N03etepMrNTxGw3MUjw7scLD1r8yG7X42Je+AStVvMVlA=='
        # backendAzureRmKey: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        # allowTelemetryCollection: false
        # backendAzureRmContainerName: '${{ parameters.backendAzureRmContainerName }}'
        # backendAzureRmKey: '${{ parmeters.componenets }}.tfstate'
        # environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        # environmentServiceName: 'myServiceConnection'
        commandOptions: '-backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'
        #commandOptions: '-backend-config=/$(System.DefaultWorkingDirectory)/terraform/environments/test/backend.tf'
        # addSpnToEnvironment: true

#    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
#    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
    - task: TerraformTaskV3@3
      displayName: 'Terrafom validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        #commandOptions: '-lock=false -var-file="$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars"'
    
    - task: TerraformTaskV3@3
      displayName: 'Terrafom plan'
      inputs:
        command: 'plan'
        # commandOptions: '-lock=false -var-file="terraform.tfvars" -out=./mydevopsdeployment03.plan'
        commandOptions: '-lock=false -var-file="$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars"'
        # provider: 'azurerm'
        backendType: 'azurerm'
        # backendServiceArm: 'myServiceConnection'
        environmentServiceNameAzureRM: 'myServiceConnection'
        # backendAzureRmStorageAccountName: 'mydevopsdemoblob'
        # backendAzureRmContainerName: 'tfstate'
        # backendAzureRmKey: 'SuLBd1YGQF4aMCukZa7CMlRBKCydv7alo8CMRPJl6N03etepMrNTxGw3MUjw7scLD1r8yG7X42Je+AStVvMVlA=='
        # backendServiceArm: '$(azureServiceConnectionId)'
        # backendAzureRmSubscriptionId: '64b5de4c-738a-488c-9d2c-0a702a6d086a'
        # backendAzureRmResourceGroupName: 'Azuredevops'
        #backendAzureRmStorageAccountName: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops/providers/Microsoft.Storage/storageAccounts/mydevopsdemoblob'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        # environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        # commandOptions: '-auto-approve'
        # commandOptions: '-backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'
        #commandOptions: '-backend-config=/$(System.DefaultWorkingDirectory)/terraform/environments/test/backend.tf'
        # allowTelemetryCollection: false

    # - task: TerraformCLI@0
    # # - task: TerraformTaskV3@3
    #   displayName: 'Terraform import'
    #   inputs:
    #     command: 'import'
    #     commandOptions: '-lock=false -var-file="terraform.tfvars"'
    #     #backendType: 'azurerm'
    #     backendAzureRmContainerName: 'tfstate'
    #     backendAzureRmKey: 'terraform.tfstate'
    #     environmentServiceNameAzureRM: 'myServiceConnection'
    # #     addSpnToEnvironment: true
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     resourceAddress: 'module.resource_group.azurerm_resource_group.Azuredevops'
    #     resourceId: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops'
#        resourceAddress: 'module.networksecuritygroup.azurerm_network_security_group.Azuredevops'
#        resourceId: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops/providers/Microsoft.Network/networkSecurityGroups/mydevopsagent-nsg'
        #resourceAddress: 'module.network.azurerm_virtual_network.Azuredevops'
        #resourceId: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops/providers/Microsoft.Network/virtualNetworks/mydevopsagent-vnet'
        
    - task: ArchiveFiles@1
      displayName: "Archiving from local env to cloud env."
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/terraform/'
        includeRootFolder: true
        archiveType: 'tar'
        archiveFile: '$(BuildArtifactStagingDirectory)/build.tar.gz'
        
    - task: CopyFiles@2
      displayName: "Deploying IaaC from local env to cloud env."
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/terraform/'
        Contents: |
          **/*.tf
          **/*.tfvars
          **/*tfplan*
        # TargetFolder: '$(System.ArtifactsDirectory)/$(Artifact)/terraform/'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/'
        # TargetFolder: '$(System.DefaultWorkingDirectory)/$(Artifact)/'

    # - task: CopyFiles@2
    #   displayName: "Deploying IaaC from local env to cloud env."
    #   inputs:
    #     SourceFolder: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/'
    #     Contents: |
    #       **/*.tf
    #       **/*.tfvars
    #       **/*tfplan*
    #     # TargetFolder: '$(System.ArtifactsDirectory)/$(Artifact)/terraform/'
    #     TargetFolder: '$(System.DefaultWorkingDirectory)/$(Artifact)/'
        
    # Publish Artifacts:-
    - task: PublishBuildArtifacts@1
      displayName: 'PUBLISH ARTIFACTS'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/'
        # targetPath: '$(System.ArtifactsDirectory)/$(Artifact)/terraform/environments/test'
        # targetPath: '$(System.ArtifactsDirectory)/$(Artifact)/terraform/'
        artifactName: '$(Artifact)'
        # ArtifactName: 'output-myArtifacts'
        publishLocation: 'Container'
        
    # - task: TerraformTaskV3@3
    #   displayName: 'Terrafom apply'
    #   inputs:
    #     command: 'apply'
    #     commandOptions: '-lock=false -var-file="terraform.tfvars" --out="mydevopsdeployment03.plan"'
    #     # provider: 'azurerm'
    #     backendType: 'azurerm'
    #     # backendServiceArm: 'myServiceConnection'
    #     environmentServiceNameAzureRM: 'myServiceConnection'
    #     #commandOptions: '-lock=false -var-file="terraform.tfvars"'
    #     backendAzureRmContainerName: 'tfstate'
    #     backendAzureRmKey: 'terraform.tfstate'
    #     #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     workingDirectory: '$(System.ArtifactsDirectory)/terraform/environments/test'
        #environmentServiceNameAzureRM: 'myServiceConnection'

    # - task: CopyFiles@2
    #   displayName: "Deploying IaaC from local env to cloud env."
    #   inputs:
    #     SourceFolder: '$(workingDirectory)'
    #     Contents: |
    #       **/*.tf
    #       **/*.tfvars
    #       **/*tfplan*
    #     TargetFolder: '$(Target)'
        
    # # Publish Artifacts:-
    # - task: PublishBuildArtifacts@1
    #   displayName: PUBLISH ARTIFACTS
    #   inputs:
    #     targetPath: '$(Target)'
    #     artifactName: '$(Artifact)'
        #Contents: '../../terraform/**'
        #TargetFolder: '$(Build.ArtifactStagingDirectory)'
        #archiveType: 'zip'
        #archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

    # - task: PublishBuildArtifacts@1
    #   displayName: 'porting to apply stage.'
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     # targetPath: '$(System.ArtifactsDirectory)/$(Artifact)/terraform/'
    #     ArtifactName: 'output-myArtifacts'
        # ArtifactName: '$(Artifact)'
        # publishLocation: 'Container'
        
    ##deploymentStage:
- stage: Deploy
# displayName: 'Deploy Web App'
  dependsOn: Build
  # dependsOn: PLAN
  condition: succeeded()
  # dependsOn: [terraform_plan]
  # condition: succeeded('terraform_plan')  
  jobs:
  - deployment: DeploymentJob
    pool: myAgentPool
    # environment: '$(environmentName)'
    environment: 'mydevopsagentvm'
    strategy:
      
      runOnce:
        # preDeploy:
        #   steps:
        #     - script: |
        #          echo Begin deployment
        #          cd /home/devopsagent/myagent/_work/_tool/terraform/1.7.4/x64/terraform
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Terrafom installation'
            inputs:
              #terraformVersion: '1.5.7'
              terraformVersion: 'latest'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts for deployment.'
            # displayName: 'Deploy Azure Web App : mywebapp248927'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              # artifactName: 'output-myArtifacts'
              artifactname: '$(Artifact)'
              addSpnToEnvironment: true
              # downloadPath: '$(System.ArtifactDirectory)'
              # downloadPath: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/'
              # downloadPath: '$(System.DefaultWorkingDirectory)/'
              # downloadPath: '/home/devopsagent/myagent/_work/_tool/terraform/1.7.4/x64/terraform/'
              downloadPath: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/'

             
          # - task: TerraformCLI@0
          # - task: TerraformTaskV3@3
          #   displayName: 'Terraform import'
          #   inputs:
          #     command: 'import'
          #     commandOptions: '-lock=false -var-file="terraform.tfvars"'
          #     #backendType: 'azurerm'
          #     backendAzureRmContainerName: 'tfstate'
          #     backendAzureRmKey: 'terraform.tfstate'
          #     environmentServiceNameAzureRM: 'myServiceConnection'
          #     #addSpnToEnvironment: true
          #     # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          #     workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/'
          #     resourceAddress: 'module.resource_group.azurerm_resource_group.Azuredevops'
          #     resourceId: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops'
     #        resourceAddress: 'module.networksecuritygroup.azurerm_network_security_group.Azuredevops'
     #        resourceId:     '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops/providers/Microsoft.Network/networkSecurityGroups/mydevopsagent-nsg'
             #resourceAddress: 'module.network.azurerm_virtual_network.Azuredevops'
             #resourceId: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops/providers/Microsoft.Network/virtualNetworks/mydevopsagent-vnet'

          # - task: TerraformTaskV3@3
          #   displayName: init
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'init'
          #     backendServiceArm: 'Azure subscription 1 (64b5de4c-738a-488c-9d2c-0a702a6d086a)'
          #     backendAzureRmResourceGroupName: 'Azuredevops'
          #     backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
          #     backendAzureRmContainerName: 'tfstate'
          #     backendAzureRmKey: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          #     workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
         
          #  # Get Azure account details
          #  echo "==> Setting Subscription environment variables"
          #  if [[ ! -z "${servicePrincipalId:-}" ]]; then
          #    SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          #    TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          #    CLIENT_ID=${servicePrincipalId:-}
          #    CLIENT_SECRET=${servicePrincipalKey:-}
          #  else
          #    SUBSCRIPTION_ID=64b5de4c-738a-488c-9d2c-0a702a6d086a
          #    TENANT_ID=6b6c018c-f2e6-48d8-b64f-4cd02807e329
          #    CLIENT_ID=cb725380-0ace-452a-8a6f-4a8419eceb70
          #    CLIENT_SECRET=.z.8Q~zJv3oYw5zYcJI2Fq0qZgtXEZz3hgUrxaOT
          #  fi

          #  # Define environment variables
          #  export ARM_SUBSCRIPTION_ID=${ARM_SUBSCRIPTION_ID:-$SUBSCRIPTION_ID} \
          #    ARM_TENANT_ID=${ARM_TENANT_ID:-$TENANT_ID} \
          #    ARM_CLIENT_ID=${ARM_CLIENT_ID:-$CLIENT_ID} \
          #    ARM_CLIENT_SECRET=${ARM_CLIENT_SECRET:-$CLIENT_SECRET}
          - task: AzureCLI@1
            displayName: Terraform check 
            inputs:
              azureSubscription: "myServiceConnection"
              workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
              scriptLocation: inlineScript
              inlineScript: |
                #set -eux  # fail on error                
                terraform init -reconfigure\
                  -backend-config=storage_account_name="myazuredevopsdemoblob" \
                  -backend-config=container_name="tfstate" \
                  #-backend-config=key=$(key)/terraform.tfstate \
                  #-backend-config=sas_token=$(artifactsLocationSasToken) \
                  #-backend-config=subscription_id="64b5de4c-738a-488c-9d2c-0a702a6d086a" \
                  #-backend-config=tenant_id="6b6c018c-f2e6-48d8-b64f-4cd02807e329" \
                  #-backend-config=client_id="1d36b4d2-d387-4d57-9003-6d20dc9b0a31" \
                  #-backend-config=client_secret="BUY8Q~RhjLfBjR88LFqzH0K76vHCJ7dtFDQmHa9M" 
              addSpnToEnvironment: true
            

              
          # - task: TerraformTaskV3@3
      #     # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
      #       displayName: init
      # #    - task: TerraformTaskV2@2
      #       inputs:
      #         provider: 'azurerm'
      #         command: 'init'
      #         # commandOptions: 'init'
      #         # workingDirectory: '$(System.ArtifactsDirectory)/$(Artifact)/terraform/'
      #         # workingDirectory: '$(System.DefaultWorkingDirectory)/'
      #         # workingDirectory: '$(Build.ArtifactStagingDirectory)/$(Artifact)/environments/test/'
      #         # workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/'
      #         workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
      #         # workingDirectory: '$(System.DefaultWorkingDirectory)/[InputArtifactSourceAlias]/drop/[TfScriptDir]'
      #         # backendType: azurerm 
      #         # backendServiceArm: '$(azureServiceConnectionId)'
      #         # backendAzureRmContainerName: '${{ parameters.backendcontainername }}'
      #         backendServiceArm: 'myServiceConnection'
      #         # backendServiceArm: 'Azure subscription 1 (64b5de4c-738a-488c-9d2c-0a702a6d086a)'
      #         # backendAzureRmSubscriptionId: '64b5de4c-738a-488c-9d2c-0a702a6d086a'
      #         backendAzureRmResourceGroupName: 'Azuredevops'
      #         # backendAzureRmStorageAccountName: '/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops/providers/Microsoft.Storage/storageAccounts/mydevopsdemoblob'
      #         backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
      #         backendAzureRmContainerName: 'tfstate'
      #         backendAzureRmKey: 'terraform.tfstate'
      #         addSpnToEnvironment: true 
              # backendAzureRmKey: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/terraform.tfstate'
              #addSpnToEnvironment: true

          # - task: AzureCLI@1
          #   displayName: Terraform check 
          #   inputs:
          #     azureSubscription: "myServiceConnection"
          #     workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
          #     scriptLocation: inlineScript
          #     inlineScript: |
          #       #set -eux  # fail on error                
          #       terraform init \
          #         -backend-config=storage_account_name="myazuredevopsdemoblob" \
          #         -backend-config=container_name="tfstate" \
          #         #-backend-config=key=$(key)/terraform.tfstate \
          #         #-backend-config=sas_token=$(artifactsLocationSasToken) \
          #         #-backend-config=subscription_id="64b5de4c-738a-488c-9d2c-0a702a6d086a" \
          #         #-backend-config=tenant_id="6b6c018c-f2e6-48d8-b64f-4cd02807e329" \
          #         #-backend-config=client_id="1d36b4d2-d387-4d57-9003-6d20dc9b0a31" \
          #         #-backend-config=client_secret="BUY8Q~RhjLfBjR88LFqzH0K76vHCJ7dtFDQmHa9M" 
          #     addSpnToEnvironment: true    

          # - task: AzureCLI@2
          #   continueOnError: true
          #   inputs:
          #     addSpnToEnvironment: true
          #     scriptLocation: inlineScript
              # az deployment group create ... --parameters SPId=$env:servicePrincipalId
              
          - task: TerraformTaskV3@3
            # continueOnError: true
            displayName: 'Terrafom plan'          
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-input=false -var-file="/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/terraform.tfvars"'
              environmentServiceNameAzureRM: 'myServiceConnection'
              workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
          
          - task: TerraformTaskV3@3
            # continueOnError: true
            displayName: 'Terrafom apply'
            # displayName: TERRAFORM APPLY
            inputs:
              provider: 'azurerm'
              command: 'apply'
              # workingDirectory: '$(System.ArtifactsDirectory)/$(Artifact)/environments/test/'
              # workingDirectory: '$(System.ArtifactsDirectory)/$(Artifact)/terraform/'
              # workingDirectory: '$(System.DefaultWorkingDirectory)/$(Artifact)/terraform/environments/test/'
              # workingDirectory: 'output-myArtifacts/'
              # workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/'
              workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
              # workingDirectory: '$(Build.ArtifactStagingDirectory)/$(Artifact)/environments/test/'
              #workingDirectory: '$(System.DefaultWorkingDirectory)/$(Artifact)/'
              commandOptions: '-input=false -auto-approve -var-file="/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/terraform.tfvars"'
              backendType: 'azurerm'
              backendServiceArm: 'myServiceConnection'
              environmentServiceNameAzureRM: 'myServiceConnection'
              addSpnToEnvironment: true
              OverWrite: true
              # commandOptions: '-backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'
              #commandOptions: '-lock=false -var-file="terraform.tfvars"'
              # backendAzureRmContainerName: 'tfstate'
              # backendAzureRmKey: 'terraform.tfstate'
              # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              
        
              # ConnectionType: 'AzureRM'
              # azureSubscription: '$(azureServiceConnectionId)'
              #appName: '$(webAppName)'
              # appName: 'myAzWebapp248927'
              # appType: 'webApp'
              # WebAppName: 'myAzWebapp248927'
              # package: '$(Pipeline.Workspace)/$(Artifact)/$(Build.BuildId).zip'
              # SourceFolder: '$(Pipeline.Workspace)/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/'
              # Contents: '**'
              # TargetFolder: '$(Agent.TempDirectory)'
              #OverWrite: true
              
          # - task: Bash@3
          #   displayName: 'Functional tests'
          #   inputs:
          #     targetType: 'inline'
          #     script: |           
          #       #! /bin/bash
              
          #       sudo apt-get upgrade -y
          #       sudo apt-get install python3-pip -y
          #       sudo apt-get install unzip -y
          #       sudo apt-get install -y chromium-browser
          #       pip3 install selenium
          #       wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip -P ~/
          #       unzip ~/chromedriver_linux64.zip -d ~/                
          #       sudo mv -f ~/chromedriver $HOME/.local/bin/chromedriver
          #       sudo chown root:root $HOME/.local/bin/chromedriver
          #       sudo chmod 0774 $HOME/.local/bin/chromedriver
          #       wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
          #       tar -xf apache-jmeter-5.6.1.tgz
          #       unzip -o $(Build.BuildId)-perftests.zip
          #       ./apache-jmeter-5.6.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
          #       cat jmeter.log
          #       cd ~/
          #       DIR=/home/testuser/app
          #       if [ ! -d "$DIR" ]; then
          #           mkdir app
          #       fi
          #       mv /home/testuser/devopsagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
          #       cd app
          #       unzip -o $(Build.BuildId)-uitests.zip
          #       FILE=/home/testuser/app/chromedriver_linux64.zip
          #       if [ ! -f "$FILE" ]; then
          #           LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
          #           wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
          #           unzip -o chromedriver_linux64.zip
          #           sudo ln -s $PWD/chromedriver $HOME/.local/bin/chromedriver
          #       fi
          #       export PATH=$PATH:/home/testuser/app
          #       echo "Starting Selenium Tests"
          #       python3 add_remove_from_cart.py >> selenium.log
          #       echo "Completed Selenium Tests. Check selenium.log for results."

          # - task: CmdLine@2
          #   displayName: 'units'
          #   inputs:
          #     script: |
          #       python3 $(System.DefaultWorkingDirectory)/login.py
          # - task: JMeterInstaller@0
          #   displayName: 'junitInstall'

          # - task: Bash@3
          #   displayName: 'unitTests'
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       'jmeter -n -t automatedtesting/jmeter/Starter.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JstressTestUsers=10 -JEnduranceTestUsers=0'
            
          # - task: Bash@3
          #   displayName: 'unitTests'
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       'jmeter -n -t automatedtesting/jmeter/Starter.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JstressTestUsers=0 -JEnduranceTestUsers=10'

    
    # - task: CmdLine@2
    #   displayName: "Run Data Validation Tests"
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run TestSuite.Data-Validation.json -e test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # - task: CmdLine@2
    #   continueOnError: true
    #   displayName: "Run data validation commands"
    #   inputs:
    #     script: 'newman run automatedtesting/postman/StarterAPIs.json -e automatedtesting/postman/test_environment.json --reporters cli,junit --reporter-junit-export Results\junitReport.xml'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)'

    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '**/TEST-*.xml'
    #     searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
    #     mergeTestResults: true
    #     testRunTitle: 'JUnit Results'    
      
    # - task: ArchiveFiles@2
    #   displayName: 'Archive UI Tests'
    #   inputs:
    #     contents: 'automatedtesting/selenium/**'
    #     targetFolder: '$(Build.StagingDirectory)'
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

    #  # Selenium Test Suite - Publish the package  
    # - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    #   # Same as the archiveFile artifact above. 
    #   displayName: 'Upload Package'
    #   artifact: drop-uitests

    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi

    # - task: ArchiveFiles@2
    #   displayName: 'Archive PerformanceTestSuite'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # # JMeter Test Suite - Publish    
    # - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    #   displayName: 'Upload Package'
    #   artifact: drop-perftests



