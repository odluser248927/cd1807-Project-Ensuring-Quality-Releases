

trigger:
- main

variables:
  azureServiceConnectionId: 'myServiceConnection'
  System.Debug: true 

  vmImageName: 'ubuntu-latest'
  environmentName: 'mydevopsagentvm'

  
  projectRoot: '$(System.DefaultWorkingDirectory)/'
  

stages:
- stage: 'Build'
  displayName: 'Build stage'
  jobs:
  - job: 'Build'
    pool: myAgentPool
    steps:
        
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
        
    - task: TerraformTaskV3@3
      displayName: 'init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendType: 'azurerm'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
        backendAzureRmContainerName: 'tfstate'
        #backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        commandOptions: '-backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'

    - task: TerraformTaskV3@3
      displayName: 'Terrafom validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # - task: CmdLine@2
    #   displayName: "newman install"
    #   continueOnError: true
    #   #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman'
    #   inputs:
    #     script: |
    #       'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export Test-DataValidation.xml' \
          #workingDirectory: $(Build.SourcesDirectory)
          #newman --version
          #sudo npm install -g newman
          #workingDirectory: '/home/devopsagent/myagent/externals/node10/bin/node'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/'

    # - task: Bash@3
    #   displayName: "run test report"
    #   continueOnError: true
    #   inputs:
    #     script: |
    #       'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export Test-DataValidation.xml'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/environments/test/automatedtesting/postman'
          #workingDirectory: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/postman'
          #workingDirectory: '$(System.DefaultWorkingDirectory)'
          #workingDirectory: '$(build.sourcesdirectory)'
          #workingDirectory: 'home/devopsagent/myagent/externals/node10/bin/node'
          #workingDirectory: '/home/devopsagent/myagent/_work/20/s/terraform/environments/test/automatedtesting/postman'

    # Postman Data Validation Test Suite       
    # - task: CmdLine@2
    #   displayName: "run test report"
    #   continueOnError: true
    #   inputs:
    #     script: |
    #       'newman run automatedtesting/postman/StarterAPIs.json -e automatedtesting/postman/StarterAPIs.json --reporters cli, junit --reporter-junit-export Results\junitReport.xml' 
    #     workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/postman'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # newman --version
          #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman'
          # script: 'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export junitReport.xml'
        
    - task: ArchiveFiles@1
      displayName: "Archiving from local env to cloud env."
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        includeRootFolder: true
        archiveType: 'tar'
        archiveFile: '$(BuildArtifactStagingDirectory)/build.tar.gz'
        
    - task: CopyFiles@2
      displayName: "Deploying IaaC from local env to cloud env."
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        Contents: |
          **
          **/*.tf
          **/*.tfvars
          **/*tfplan*
        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'
        
     # Publish Artifacts:
    - task: PublishBuildArtifacts@1
      displayName: 'PUBLISH ARTIFACTS'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'
        artifactName: '$(Artifact)'
        publishLocation: 'Container'

    - task: CopyFiles@2
      displayName: 'Selenium files cp to pipeline'
      inputs:
        contents: '$(System.DefaultWorkingDirectory)/terraform/environments/tests/automatedtesting/selenium/**'
        targetFolder: '$(Build.StagingDirectory)'        
    - publish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/selenium'
      displayName: 'Selenium python scripts.'
      artifact: dropScripts
    
        
    # deploymentStage:
- stage: Deploy
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: DeploymentJob
    pool: myAgentPool
    environment: 'mydevopsagentvm'
    strategy:
      
      runOnce:        
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Terrafom installation'
            inputs:
              terraformVersion: 'latest'
              
          - script: |
             terraform --version             

          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts for deployment.'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactname: '$(Artifact)'
              addSpnToEnvironment: true
              downloadPath: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'

          - task: CmdLine@2
            displayName: 'Copy terraform.tfvars to local working directory'
            inputs:
              script: |                
                cp -r '$(Agent.TempDirectory)/' '$(Build.ArtifactStagingDirectory)/'
                cp -r '$(Agent.TempDirectory)/' '/home/devopsagent/myagent/_work/_tool/terraform/'

          - task: Bash@3
            displayName: "import test:"
            inputs:
              provider: 'azurerm'
              backendServiceArm: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              commandOptions: '-lock=false -auto-approve -var-file="$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars"'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              targetType: 'inline'
              script: |
                terraform import azurerm_resource_group.Azuredevops \ "/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops" \
                terraform --version \
                terraform import -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars" \

          - task: TerraformTaskV3@3
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              backendAzureRmContainerName: 'tfstate'
              commandOptions: '-reconfigure -lock=false -backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'
              backendAzureRmKey: 'terraform.tfstate'                        
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'              

          - task: TerraformTaskV3@3
            displayName: 'Terrafom plan'
            inputs:
              command: 'plan'
              environmentServiceNameAzureRM: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              backendAzureRmContainerName: 'tfstate'
              commandOptions: '-lock=false -input=false -out="mydevopsdeployment03.plan" -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars"'
              backendType: 'azurerm'
              backendAzureRmKey: 'terraform.tfstate'              
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'              
                
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: 'Terrafom apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              addSpnToEnvironment: true
              environmentServiceNameAzureRM: 'myServiceConnection'
              commandOptions: '-auto-approve -lock=false -input=false -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars"'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
          
          # - task: CmdLine@2
          #   displayName: "newman install"
          #   continueOnError: true            
          #   inputs:        
          #     script: |
          #       sudo npm install -g newman
          #       #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
          #       workingDirectory: exec('/home/devopsagent/myagent/externals/node10/bin/node')

          # - task: NewmanPostman@4
          #   displayName: 'Newman - Postman'
          #   inputs:
          #     collectionFileSource: 'Test.environment.json'
          #     environmentSourceType: none
          #     ignoreRedirect: false
          #     bail: false
          #     sslInsecure: false
          #     htmlExtraDarkTheme: false
          #     htmlExtraLogs: false
          #     htmlExtraTestPaging: false

          # # Postman Data Validation Test Suite       
          - task: CmdLine@2
            displayName: "run test report"
            continueOnError: true
            inputs:
              script: |
                script: 'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export Test-Regression.xml' \
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman' \
                #workingDirectory: 'home/devopsagent/myagent/externals/node10/bin/node'

          # # Postman Data Validation Test Suite       
          # - task: CmdLine@2
          #   displayName: "run data check"            
          #   continueOnError: true
          #   inputs:
          #     script: |                
          #       workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          #       script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli, junit --reporter-junit-export Test-DataValidation.xml'
                
          # # Postman Regression Test Suite       
          # - task: CmdLine@2
          #   displayName: "run regression check"            
          #   continueOnError: true
          #   inputs:
          #     script: |                
          #       workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          #       script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli, junit --reporter-junit-export Test-Regression.xml'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              mergeTestResults: true
              testRunTitle: 'J Tests'       

          - task: ArchiveFiles@2
            displayName: 'Archive UI Tests'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
              
          # Selenium Test Suite - Publish the package  
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   
            displayName: 'Upload Package'
            artifact: drop-uitests

          # FakeRestAPI - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step 
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs: 
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: 'Upload Package'
            artifact: drop-fakerestapi

          # JMeter (Performance) Test Suite - Archive          
          - task: ArchiveFiles@2
            displayName: 'Archive PerformanceTestSuite'
            inputs:
              rootFolderOrFile: 
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'              
          # JMeter Test Suite - Publish    
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: 'Upload Package'
            artifact: drop-perftests

          # - task: Bash@3
          #   displayName: Install Python, chromium and Run Selenium Tests
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       #! /bin/bash

          #       # sudo apt-get upgrade -y
          #       # sudo apt-get install python3-pip -y
          #       # sudo apt-get install unzip -y
          #       # sudo apt-get install -y chromium-browser
          #       # pip3 install selenium
          #       # cd ~/
          #       # DIR=/home/testuser/app
          #       # if [ ! -d "$DIR" ]; then
          #       #     mkdir app
          #       # fi
          #       # mv $(Build.ArtifactStagingDirectory)/drop-uitests/$(Build.BuildId)-uitests.zip app
          #       # #mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
          #       # cd app
          #       # unzip -o $(Build.BuildId)-uitests.zip
          #       # FILE=/home/testuser/app/chromedriver_linux64.zip
          #       # if [ ! -f "$FILE" ]; then
          #       #     LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
          #       #     wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
          #       #     unzip -o chromedriver_linux64.zip
          #       #     sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
          #       # fi
          #       # export PATH=$PATH:/home/testuser/app
          #       # echo "Starting Selenium Tests"
          #       # python3 add_remove_from_cart.py >> selenium.log
          #       # echo "Completed Selenium Tests. Check selenium.log for results."
                
          #       CHROME_DRIVER_VERSION=`curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE`
          #       sudo apt-get upgrade -y
          #       sudo apt-get install python3-pip -y
          #       sudo apt-get install unzip -y
          #       sudo apt-get install -y chromium-browser
          #       sudo apt-get install unzip
          #       pip3 install webdriver-manager
          #       pip3 install selenium
          #       echo CHROME_DRIVER_VERSION
          #       wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip 
          #       unzip ~/chromedriver_linux64.zip -d ~/
          #       rm ~/chromedriver_linux64.zip
          #       sudo mv -f ~/chromedriver /usr/local/bin/chromedriver
          #       sudo chown root:root /usr/local/bin/chromedriver
          #       sudo chmod 0755 /usr/local/bin/chromedriver
                
          # - task: CmdLine@2
          #   condition: succeededOrFailed()
          #   displayName: Run Selenium Tests
          #   inputs:
          #     script: |
          #       python3 $(Agent.TempDirectory)/login.py
                
  # - deployment: FakeRestAPI
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   environment: 'mydevopsagentvm'
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: AzureWebApp@1
  #           displayName: 'Deploy Azure Web App'
  #           inputs:
  #             azureSubscription: 'myServiceConnection'
  #             appName: 'myWebApp'
  #             appType: webApp
  #             #package: $(Pipeline.Workspace)/$(Artifact)/fakerestapi.zip
  #             #package: $(Pipeline.Workspace)/$(Build.BuildId)-fakerestapi.zip
  #             package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

  # - job: Jmeter
  #   dependsOn: FakeRestAPI
  #   pool:
  #       vmImage: 'ubuntu-latest'
  #   steps:
  #   - task: JMeterInstaller@0
  #     displayName: 'Install JMeter 5.6.3'
  #     inputs:
  #       jmeterVersion: '5.6.3'
        
  #   - task: Bash@3
  #     displayName: 'Run Jmeter Stress test'
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         'jmeter -n -t automatedtesting/jmeter/PerformanceTestSuite.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JStressTestUsers=10 -JEnduranceTestUsers=0'
          
  #   - task: Bash@3
  #     displayName: 'Run Jmeter Endurance test'
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         'jmeter -n -t automatedtesting/jmeter/PerformanceTestSuite.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JStressTestUsers=0 -JEnduranceTestUsers=10'  

