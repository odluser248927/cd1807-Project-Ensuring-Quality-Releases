

trigger:
- main

variables:
  azureServiceConnectionId: 'myServiceConnection'
  System.Debug: true 

  webAppName: 'Azuredevops-AppService'
  
  vmImageName: 'ubuntu-latest'
  environmentName: 'mydevopsagentvm'

  
  projectRoot: '$(System.DefaultWorkingDirectory)/'
  

stages:
- stage: 'Build'
  displayName: 'Build stage'
  jobs:
  - job: 'Build'
    pool: myAgentPool
    steps:
    # - task: Bash@3
    #   displayName: 'Install Py files'
    #   continueOnError: true 
    #   workingDirectory: '$(projectRoot)'
    #   inputs:
    #     targetType: 'inline'
    #     script: |      
    #       sudo apt install python3.9
    #       sudo apt-get install pyton3.9-venv
    #       sudo apt-get install python3-pip
    #       python3.9 --version
    #       pip --version
    #       python3.9 -m pip install --upgrade pip
    #       python3.9 -m pip install setup
    #       python3.9 -m pip install -r requirements.txt
      
    #   displayName: 'Install py env.'
    
    #     python -m venv .mypy3env
    #     source .mypy3env/bin/activate
    #     python -m pip install --upgrade pip
    #     pip install setup
    #     pip install -r requirements.txt
    #   workingDirectory: $(projectRoot)
    #   displayName: "Install requirements"
        
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
        
    - task: TerraformTaskV3@3
      displayName: 'init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendType: 'azurerm'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
        backendAzureRmContainerName: 'tfstate'
        #backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        commandOptions: '-backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'

    - task: TerraformTaskV3@3
      displayName: 'Terrafom validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # - task: AzureWebApp@1
    #   displayName: 'Deploy Azure Web App:'
    #   continueOnError: true 
    #   inputs:
    #     azureSubscription: '$(azureServiceConnectionId)'
    #     appType: webApp
    #     #deployToSlotOrASE: true
    #     resourceGroupName: 'Azuredevops'
    #     #slotName: 'staging'
    #     appName: '$(webAppName)'
    #     package: '$(Build.ArtifactStagingDirectory)/drop-apitests/$(Build.BuildId)-apitests.zip'
        #package: '$(Pipeline.Workspace)/$(Build.BuildId)-uitests.zip'
    
    
        
    # - task: Bash@3
    #   displayName: 'newman install'
    #   continueOnError: true
    #   inputs:
    #     targetType: inline
    #     script: |
    #       workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test' \
    #       echo "Newman tests." \
    #       "newman --version" \          
    #       'export NPM_CONFIG_PREFIX="/usr/bin/bash"' \
    #       'sudo npm install -g newman'                 
    #       'cd /home/devopsagent/myagent/externals/node10/bin/node'
    #       'export PATH=/home/devopsagent/myagent/externals/node10/bin/node:$(System.DefaultWorkingDirectory)'
    #       #workingDirectory: '$(Build.StagingDirectory)' \ 
    #       #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman'
    #       workingDirectory: '/home/devopsagent/myagent/externals/node10/bin/node'
    
    # - task: CopyFiles@2
    #   displayName: 'newmam files cp to pipeline'
    #   inputs:
    #     contents: '/home/devopsagent/myagent/externals/node10/bin/node/'
    #     targetFolder: '$(Build.StagingDirectory)'        
    # - publish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/postman'
    #   displayName: 'copy npm path.'
      
    # - task: Bash@3
    #   displayName: "run test report"
    #   continueOnError: true
    #   inputs:
    #     script: |
    #       'newman -v'
          #'export NPM_CONFIG_PREFIX="/usr/local"`
          #'newman -v --global-var "$(System.DefaultWorkingDirectory)/$(Artifact)/environments/test/automatedtesting/postman"'
          #workingDirectory: '$(Build.SourcesDirectory)'
          #newman run Test.environment.json --global-var '$(System.DefaultWorkingDirectory)/$(Artifact)/environments/test/automatedtesting/postman'  --reporters cli,junit --reporter-junit-export Results\junitReport.xml

          #cd /home/devopsagent/myagent/externals/node10/bin/node
          #sudo npm install -g newman newman-reporter-htmlextra
          #'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export /Results/Test-DataValidation.xml'
          #workingDirectory: '$(Build.StagingDirectory)'
          #workingDirectory: '$(System.DefaultWorkingDirectory)'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/home/devopsagent/myagent/_work/20/s'
          #workingDirectory: '/home/devopsagent/myagent/_work/20/s'
          #workingDirectory: '/home/devopsagent/myagent/_work/_temp'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/$(Artifact)/environments/test/automatedtesting/postman'
          #workingDirectory: '/home/devopsagent/myagent/externals/node10/bin/node' \
          #workingDirectory: '$(Build.ArtifactStagingDirectory)/$(Artifact)/environments/test/automatedtesting/postman'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/environments/test/automatedtesting/postman' \
          #'export NPM_CONFIG_PREFIX="/usr/local"'
          #'export NPM_CONFIG_PREFIX="/home/devopsagent/myagent/externals/node10/bin/node"'
          #'sudo npm install -g newman'          
          #newman -v
          #export PATH=/home/devopsagent/myagent/externals/node10/bin/node:$PATH \
          #'export PATH=/home/devopsagent/.nvm/versions/node/v16.20.2/bin/npm:$PATH' \
          #'export PATH=/home/devopsagent/.nvm/versions/node/v16.20.2/bin/newman:$PATH' \          
          #'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-json-export Test-DataValidation.json' \
          #workingDirectory: '$(System.DefaultWorkingDirectory)/environments/test/automatedtesting/postman' \
          #'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export /Results/Test-DataValidation.xml' \           
          #workingDirectory: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/postman' \
          #workingDirectory: '$(System.DefaultWorkingDirectory)'
          #workingDirectory: '$(Build.SourcesDirectory)' \
          #workingDirectory: 'home/devopsagent/myagent/externals/node10/bin/node'
          #workingDirectory: '/home/devopsagent/myagent/_work/20/s/terraform/environments/test/automatedtesting/postman'

    # Postman Data Validation Test Suite       
    # - task: CmdLine@2
    #   displayName: "run test report"
    #   continueOnError: true
    #   inputs:
    #     script: |
    #       'newman run automatedtesting/postman/StarterAPIs.json -e automatedtesting/postman/StarterAPIs.json --reporters cli, junit --reporter-junit-export Results\junitReport.xml' 
    #     workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/postman'
          #workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # newman --version
          #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman'
          # script: 'newman run StarterAPI.json -e Test.environment.json --reporters cli, junit --reporter-junit-export junitReport.xml'
        
    - task: ArchiveFiles@1
      displayName: "Archiving from local env to cloud env."
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        includeRootFolder: true
        archiveType: 'tar'
        archiveFile: '$(BuildArtifactStagingDirectory)/build.tar.gz'
        
    - task: CopyFiles@2
      displayName: "Deploying IaaC from local env to cloud env."
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        Contents: |
          **
          **/*.tf
          **/*.tfvars
          **/*tfplan*
        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'
        
     # Publish Artifacts:
    - task: PublishBuildArtifacts@1
      displayName: 'PUBLISH ARTIFACTS'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'
        artifactName: '$(Artifact)'
        publishLocation: 'Container'

    - task: CopyFiles@2
      displayName: 'Selenium files cp to pipeline'
      inputs:
        contents: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/selenium/**'
        targetFolder: '$(Build.StagingDirectory)'        
    - publish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/selenium'
      displayName: 'Selenium python scripts.'
      artifact: dropScripts

    - task: CopyFiles@2
      displayName: 'Newman files cp to pipeline'
      inputs:
        contents: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/**'
        targetFolder: '$(Build.StagingDirectory)'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/postman'
      displayName: 'Newman scripts.'
      artifact: Newman-dropScripts

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/**'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/postman'
        artifactName: drop-newman

    # - task: AzureWebApp@1
    #   displayName: 'build Azure Web App'
    #   continueOnError: true
    #   inputs:
    #     azureSubscription: '$(azureServiceConnectionId)'
    #     appName: '$(webAppName)'
    #     appType: webApp
    #     deployToSlotOrASE: true
    #     resourceGroupName: 'Azuredevops'
    #     slotName: 'staging'
    #     package: '$(Pipeline.Workspace)/drop-apitests/$(Build.BuildId)-apitests.zip'    

    # - task: runwebapp@3
    #   displayName: 'runWebApp'
    #   inputs:
    #     rootFolderOrFile: '$(projectRoot)'
    #     command: 'az webapp up --name $(webAppName) --resource-group Azuredevops --sku B1 --logs --runtime "PYTHON:3.9"'
        
    # deploymentStage:
- stage: Deploy
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: DeploymentJob
    pool: myAgentPool
    environment: 'mydevopsagentvm'
    strategy:
      
      runOnce:        
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Terrafom installation'
            inputs:
              terraformVersion: 'latest'
              
          - script: |
             terraform --version             

          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts for deployment.'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactname: '$(Artifact)'
              addSpnToEnvironment: true
              downloadPath: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/'

          - task: CmdLine@2
            displayName: 'Copy terraform.tfvars to local working directory'
            inputs:
              script: |                
                cp -r '$(Agent.TempDirectory)/' '$(Build.ArtifactStagingDirectory)/'
                cp -r '$(Agent.TempDirectory)/' '/home/devopsagent/myagent/_work/_tool/terraform/'

          - task: Bash@3
            displayName: "import test:"
            inputs:
              provider: 'azurerm'
              backendServiceArm: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              commandOptions: '-lock=false -auto-approve -var-file="$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars"'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              targetType: 'inline'
              script: |
                terraform import azurerm_resource_group.Azuredevops \ "/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a/resourceGroups/Azuredevops" \
                terraform --version \
                terraform import -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars" \

          - task: TerraformTaskV3@3
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              backendAzureRmContainerName: 'tfstate'
              commandOptions: '-reconfigure -lock=false -backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'
              backendAzureRmKey: 'terraform.tfstate'                        
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'              

          - task: TerraformTaskV3@3
            displayName: 'Terrafom plan'
            inputs:
              command: 'plan'
              environmentServiceNameAzureRM: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              backendAzureRmContainerName: 'tfstate'
              commandOptions: '-lock=false -input=false -out="mydevopsdeployment03.plan" -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars"'
              backendType: 'azurerm'
              backendAzureRmKey: 'terraform.tfstate'              
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'              
                
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: 'Terrafom apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              addSpnToEnvironment: true
              environmentServiceNameAzureRM: 'myServiceConnection'
              commandOptions: '-auto-approve -lock=false -input=false -var-file="/home/devopsagent/myagent/_work/_tool/terraform/environments/test/terraform.tfvars"'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'

          - task: NodeTool@0
            displayName: 'npm install'
            continueOnError: true            
            inputs:        
              versionSpec: '16.20.x'                
                          
          - task: CmdLine@2
            displayName: 'newman install'
            continueOnError: true            
            inputs:        
              script: |
                npm install -g newman \
              #workingDirectory: $(System.DefaultWorkingDirectory)
                #workingDirectory: /usr/local/bin:$PATH \
              #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman'
              #workingDirectory: '$(System.DefaultWorkingDirectory)/$(Artifact)/environment/test/automatedtesting/postman'
                #newman -v \
                #export PATH=/home/devopsagent/myagent/externals/node10/bin/node:$PATH \
                #echo $PATH \                


          # Postman Data Validation Test Suite
          - download: current
            artifact: Newman-dropScripts
          - task: CopyFiles@2
            displayName: Copy Newman script to Temp folder
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/Newman-dropScripts'
              Contents: '**'
              TargetFolder: '$(Agent.TempDirectory)'
            
          # - task: CmdLine@2
          #   displayName: "run test newman-reports"
          #   continueOnError: true
          #   inputs:
          #     script: |
          #       'newman run StarterAPI.json -e Test.environment.json --reporters cli,junit --reporter-junit-export collection-StarterAPI.xml' \ 
              #workingDirectory: '$(Agent.TempDirectory)' \ 
              #workingDirectory: '$(System.ArtifactsDirectory)/Newman-dropScripts/'
              #workingDirectory: '$(System.ArtifactsDirectory)/automatedtesting/postman/'
              #workingDirectory: '$(build.sourcesdirectory)' \
              #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/'
              
          # publish 
          - task: PublishPipelineArtifact@1
            displayName: 'Publish script'
            continueOnError: true 
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/'
              artifactName: Newman-dropScripts
              publishLocation: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/environments/test/automatedtesting/postman'              
              #artifactType: filepath
              
          # - publish: $(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/*.json
          #   #artifact: $(Artifact)
          #   #artifact: NewmanWebApp
          #   artifact: newman-drop

          # Selenium Test Suite - Archive the package          
          - task: ArchiveFiles@2
            displayName: 'Archive Selenium-API-Tests'
            continueOnError: true 
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/selenium'
              includeRootFolder: True
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/drop-apitests/$(Build.BuildId)-apitests.zip'
              
          # PM Test Suite - Publish the package  
          - publish: $(Build.ArtifactStagingDirectory)/drop-apitests/$(Build.BuildId)-apitests.zip
          # Same as the archiveFile artifact above. 
            displayName: 'Upload Selenium-API-integration test Package'
            continueOnError: true 
            artifact: drop-apitests
          
          # - task: PublishTestResults@2
          #   inputs:
          #     testResultsFormat: 'JUnit'
          #     testResultsFiles: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/*xml'
          #     searchFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/'
          #     mergeTestResults: true
          #     testRunTitle: 'JSON Report'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/Results/*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/postman/Results'
              mergeTestResults: true
              testRunTitle: 'J Tests'       

          - task: ArchiveFiles@2
            displayName: 'Archive UI Tests'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
              
          # Selenium Test Suite - Publish the package  
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   
            displayName: 'Upload Package'
            artifact: drop-uitests

          # FakeRestAPI - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step 
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs: 
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
              
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: 'Upload Package'
            artifact: drop-fakerestapi

          # JMeter (Performance) Test Suite - Archive          
          - task: ArchiveFiles@2
            displayName: 'Archive PerformanceTestSuite'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform/environments/test/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
              
          # JMeter Test Suite - Publish    
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: 'Upload Package'
            artifact: drop-perftests

          - task: Bash@3
            displayName: Install Python, chromium and Run Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/devopsagent/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv $(Build.ArtifactStagingDirectory)/drop-apitests/$(Build.BuildId)-apitests.zip app
                cd app
                unzip -o $(Build.BuildId)-apitests.zip
                FILE=/home/devopsagent/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/devopsagent/app
                az webapp up -n mywebapp248927
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."

          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'current'
              artifact: 'drop-uitests'
              path: '$(Pipeline.Workspace)'    

          # - task: CmdLine@2
          #   continueOnError: true 
          #   displayName: Run Selenium Tests
          #   inputs:
          #     script: |
          #       az webapp up -n Azuredevops-AppService
                #python3 $(Agent.TempDirectory)/login.py
                #python3 $(Agent.TempDirectory)/add_remove_from_cart.py

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            continueOnError: true
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: '$(webAppName)'
              appType: webApp
              #deployToSlotOrASE: true
              resourceGroupName: 'Azuredevops'
              #slotName: 'staging'
              #package: $(Pipeline.Workspace)/$(Artifact)/fakerestapi.zip
              #package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
              #package: '$(Pipeline.Workspace)/dropScripts/'
              package: '$(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip'
              #package: '$(Pipeline.Workspace)/drop-apitests/$(Build.BuildId)-apitests.zip'
                
      
                
          #       CHROME_DRIVER_VERSION=`curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE`
          #       sudo apt-get upgrade -y
          #       sudo apt-get install python3-pip -y
          #       sudo apt-get install unzip -y
          #       sudo apt-get install -y chromium-browser
          #       sudo apt-get install unzip
          #       pip3 install webdriver-manager
          #       pip3 install selenium
          #       echo CHROME_DRIVER_VERSION
          #       wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip 
          #       unzip ~/chromedriver_linux64.zip -d ~/
          #       rm ~/chromedriver_linux64.zip
          #       sudo mv -f ~/chromedriver /usr/local/bin/chromedriver
          #       sudo chown root:root /usr/local/bin/chromedriver
          #       sudo chmod 0755 /usr/local/bin/chromedriver
          #       az webapp up -n mywebapp248927
                
          # - task: CmdLine@2
          #   condition: succeededOrFailed()
          #   displayName: Run Selenium Tests
          #   inputs:
          #     script: |
          #       python3 $(Agent.TempDirectory)/login.py
          #       python3 $(Agent.TempDirectory)/add_remove_frome_cart.py
                
  # - deployment: FakeRestAPI
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   environment: 'mydevopsagentvm'
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: AzureWebApp@1
  #           displayName: 'Deploy Azure Web App'
  #           inputs:
  #             azureSubscription: 'myServiceConnection'
  #             appName: $(webAppname)
  #             appType: webApp
  #             #package: $(Pipeline.Workspace)/$(Artifact)/fakerestapi.zip
  #             #package: $(Pipeline.Workspace)/$(Build.BuildId)-fakerestapi.zip
  #             package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

  # - job: Jmeter
  #   dependsOn: FakeRestAPI
  #   pool:
  #       vmImage: 'ubuntu-latest'
  #   steps:
  #   - task: JMeterInstaller@0
  #     displayName: 'Install JMeter 5.6.3'
  #     inputs:
  #       jmeterVersion: '5.6.3'
        
  #   - task: Bash@3
  #     displayName: 'Run Jmeter Stress test'
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         'jmeter -n -t automatedtesting/jmeter/PerformanceTestSuite.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JStressTestUsers=10 -JEnduranceTestUsers=0'
          
  #   - task: Bash@3
  #     displayName: 'Run Jmeter Endurance test'
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         'jmeter -n -t automatedtesting/jmeter/PerformanceTestSuite.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JStressTestUsers=0 -JEnduranceTestUsers=10'  

