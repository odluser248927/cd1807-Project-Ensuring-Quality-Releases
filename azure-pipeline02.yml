

trigger:
- main

variables:
  azureServiceConnectionId: 'myServiceConnection'
  # System.Debug: true 

  vmImageName: 'ubuntu-latest'
  environmentName: 'mydevopsagentvm'

  projectRoot: '$(System.DefaultWorkingDirectory)/terraform/environments/test'


stages:
- stage: 'Build'
  displayName: 'Build stage'
  jobs:
  - job: 'Build'
    pool: myAgentPool
    steps:

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
        
    - task: TerraformTaskV3@3
      displayName: init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendType: azurerm 
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        commandOptions: '-backend-config=subscription_id=64b5de4c-738a-488c-9d2c-0a702a6d086a'

    - task: TerraformTaskV3@3
      displayName: 'Terrafom validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        
    - task: TerraformTaskV3@3
      displayName: 'Terrafom plan'
      inputs:
        command: 'plan'
        commandOptions: '-lock=false -var-file="$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars"'
        backendType: 'azurerm'
        environmentServiceNameAzureRM: 'myServiceConnection'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        
    - task: CmdLine@2
      displayName: "newman install"
      continueOnError: true
      inputs:
        script: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
          nvm ls-remote
          ls -alF
          cd .nvm/
          ls -alF
          ./install.sh
          'sudo npm install -g newman'
          workingDirectory: /home/devopsagent/myagent/_work/_tool/terraform/

    - task: CmdLine@2
      displayName: "regression check"
      continueOnError: true
      inputs:
        script: 'newman run StarterAPI.json -e Test.environment1.json --reporters cli, junit --reporter-junit-export junitReport.xml'
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform/automatedtesting/postman

    # - task: Bash@3
    #   displayName: 'Functional tests'
    #   inputs:
    #     targetType: 'inline'
    #     script: |           
    #       #! /bin/bash
          
    #       sudo apt-get upgrade -y
    #       sudo apt-get install python3-pip -y
    #       sudo apt-get install unzip -y
    #       #sudo apt install default-jdk
    #       #sudo apt install default-jre
    #       sudo apt-get install -y chromium-browser
    #       pip3 install selenium
    #       wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip -P ~/
    #       unzip ~/chromedriver_linux64.zip -d ~/                
    #       sudo mv -f ~/chromedriver $HOME/.local/bin/chromedriver
    #       sudo chown root:root $HOME/.local/bin/chromedriver
    #       sudo chmod 0774 $HOME/.local/bin/chromedriver
    #       wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
    #       tar -xf apache-jmeter-5.6.3.tgz
    #       unzip -o $(Build.BuildId)-perftests.zip
    #       ./apache-jmeter-5.6.3/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
    #       cat jmeter.log
    #       cd ~/
    #       DIR=/home/devopsagent/myagent/_work/_tool/app
    #       if [ ! -d "$DIR" ]; then
    #           mkdir app
    #       fi
    #       mv /home/devopsagent/myagent/_work/_tool/1/drop-uitests/$(Build.BuildId)-uitests.zip app
    #       cd app
    #       unzip -o $(Build.BuildId)-uitests.zip
    #       FILE=/home/devopsagent/app/chromedriver_linux64.zip
    #       if [ ! -f "$FILE" ]; then
    #           LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
    #           wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
    #           unzip -o chromedriver_linux64.zip
    #           sudo ln -s $PWD/chromedriver $HOME/.local/bin/chromedriver
    #       fi
    #       export PATH=$PATH:/home/devopsagent/myagent/_work/_tool/app
    #       echo "Starting Selenium Tests"
          # python3 add_remove_from_cart.py >> selenium.log

    # - task: CmdLine@2
    #   displayName: 'units tests'
    #   inputs:
    #     script: |
    #       python3 $(System.DefaultWorkingDirectory)/automatedlogin.py
          
    - task: JMeterInstaller@0
      displayName: 'junitInstall'

    - task: Bash@3
      displayName: 'unitTests1'
      inputs:
        targetType: 'inline'
        script: |
          'jmeter -n -t automatedtesting/jmeter/Starter.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JstressTestUsers=10 -JEnduranceTestUsers=0'

    - task: Bash@3
      displayName: 'unitTests2'
      inputs:
        targetType: 'inline'
        script: |
          'jmeter -n -t /home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/jmeter/Starter.jmx -JCsvPath=automatedtesting/jmeter/NumberOfUsers.csv -JstressTestUsers=0 -JEnduranceTestUsers=10'

    - task: CmdLine@2
      displayName: "newman install"
      # continueOnError: true
      inputs:
         script: 'sudo npm install -g newman'
         workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/postman'

    - task: CmdLine@2
      continueOnError: true
      displayName: "Run automated testing commands"
      inputs:
        script: 'newman run automatedtesting/postman/StarterAPIs.json -e automatedtesting/postman/StarterAPIs.json --reporters cli, junit --reporter-junit-export Results\junitReport.xml'
        workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/postman'

    - task: CmdLine@2
      displayName: "Run Tests"
      # continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/postman'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/jmeter'
        mergeTestResults: true
        testRunTitle: 'JUnit Results'    
      
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        contents: 'automatedtesting/selenium/**'
        targetFolder: '$(Build.StagingDirectory)'
        rootFolderOrFile: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

     # Selenium Test Suite - Publish the package  
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
      displayName: 'Upload Package'
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
      displayName: 'Upload Package'
      artifact: drop-perftests
        
    - task: ArchiveFiles@1
      displayName: "Archiving from local env to cloud env."
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/terraform/'
        includeRootFolder: true
        archiveType: 'tar'
        archiveFile: '$(BuildArtifactStagingDirectory)/build.tar.gz'
        
    - task: CopyFiles@2
      displayName: "Deploying IaaC from local env to cloud env."
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/terraform/'
        Contents: |
          **/*.tf
          **/*.tfvars
          **/*tfplan*
        TargetFolder: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/'

        
    # Publish Artifacts:-
    - task: PublishBuildArtifacts@1
      displayName: 'PUBLISH ARTIFACTS'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Artifact)/terraform/'
        artifactName: '$(Artifact)'
        publishLocation: 'Container'
        
    ##deploymentStage:
- stage: Deploy
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: DeploymentJob
    pool: myAgentPool
    environment: 'mydevopsagentvm'
    strategy:
      
      runOnce:
        # preDeploy:
        #   steps:
        #     - script: |
        #          echo Begin deployment
        #          cd /home/devopsagent/myagent/_work/_tool/terraform/1.7.4/x64/terraform
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Terrafom installation'
            inputs:
              terraformVersion: 'latest'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts for deployment.'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactname: '$(Artifact)'
              addSpnToEnvironment: true
              downloadPath: '/home/devopsagent/myagent/_work/'
          
          - task: AzureCLI@1
            displayName: Terraform check 
            inputs:
              azureSubscription: "myServiceConnection"        
              workingDirectory: '/home/devopsagent/myagent/_work/'
              scriptLocation: inlineScript
              inlineScript: |
                az ad sp create-for-rbac --name="SPForTerraform" --role="Contributor" --scopes="/subscriptions/64b5de4c-738a-488c-9d2c-0a702a6d086a"
                terraform init \
                -backend-config=storage_account_name="myazuredevopsdemoblob" \
                -backend-config=container_name="tfstate" \

          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'myServiceConnection'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'myazuredevopsdemoblob'
              backendAzureRmContainerName: 'tfstate'
              commandOptions: '-reconfigure'
              backendAzureRmKey: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
                            
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: 'Terrafom plan'          
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-input=false -var-file="/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/terraform.tfvars"'
              environmentServiceNameAzureRM: 'myServiceConnection'
              workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
          
          # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
          #   # continueOnError: true
          #   displayName: 'Terrafom apply'
          #   # displayName: TERRAFORM APPLY
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'apply'
          #     workingDirectory: '/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/'
          #     # addSpnToEnvironment: true          
          #     commandOptions: '-input=false -auto-approve -var-file="/home/devopsagent/myagent/_work/15/a/$(Artifact)/terraform/$(Artifact)/environments/test/terraform.tfvars"'
          #     backendType: 'azurerm'
          #     # backendServiceArm: 'myServiceConnection'
          #     # environmentServiceNameAzureRM: 'myServiceConnection'
          #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
          #     addSpnToEnvironment: true
              # OverWrite: true
              #commandOptions: '-lock=false -var-file="terraform.tfvars"'
              # backendAzureRmContainerName: 'tfstate'
              # backendAzureRmKey: 'terraform.tfstate'        
              
           # - task: TerraformTaskV3@3
           #   displayName: Terraform destroy
           #   inputs:
           #     provider: 'azurerm'
           #     command: 'destroy'
           #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
           #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
              
          



