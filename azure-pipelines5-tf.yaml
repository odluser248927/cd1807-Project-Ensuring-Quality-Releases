# starter pipe:

trigger:
  - main
  
pool:
  vmImage: 'ubuntu-latest'

variables:
  stateContainerName: 'terraform-state'
  stateFileName: 'terraform.tfstate'

stages:
##### Azuredevops Environment #####
  - stage: PlanAzureDEV
    displayName: "Terraform plan - DEV"
    variables:
      - template: ../development-vars.yml
    jobs:
      - template: job/prerequisites.yml
        parameters:
          serviceConnection: ${{ variables.serviceConnectionName }}
          subscriptionId: ${{ variables.stateSubscriptionId }}
          resourceGroup: ${{ variables.stateResourceGroupname }}
          storageAccount: ${{ variables.stateStorageAccountName }}
          containerName: ${{ variables.stateContainerName }}
          publicNetworkAction: "Allow"

      - template: job/plan.yml
        parameters:
          dependsOn: TerraformPrerequisites
          deployment: dev
          serviceConnection: ${{ variables.serviceConnectionName }}
          resourceGroup: ${{ variables.stateResourceGroupname }}
          storageAccount: ${{ variables.stateStorageAccountName }}
          containerName: ${{ variables.stateContainerName }}
          terraformStateKey: ${{ variables.stateFileName }}
          terraformDirectory: ""

  - stage: ApplyDEV
    displayName: "Terraform apply - DEV"
    variables:
      - template: ../development-vars.yml
    jobs:
      - template: job/apply.yml
        parameters:
          environment: terraform-azure-example-dev
          deployment: dev
          serviceConnection: ${{ variables.serviceConnectionName }}
          resourceGroup: ${{ variables.stateResourceGroupname }}
          storageAccount: ${{ variables.stateStorageAccountName }}
          containerName: ${{ variables.stateContainerName }}
          terraformStateKey: ${{ variables.stateFileName }}
          terraformDirectory: ""

# steps:
  
#   - task: odluser248927.azure-pipelines-tasks-terraform.azure-piplines-tasks-terraform-installer.TerraformInstaller@0
#     displayName: 'Terrafom installation'
#     inputs:
#       terraformVersion: '1.5.7'
    
#   # Run Terraform Init on the pipeline agent 
#   # ToDo: Replace the resource group name, storage account name, and container name below
#   - task: azure-pipelines-tasks-terraform.azure-piplines-tasks-terraform-cli.TerraformCLI@0
#     displayName: 'Terrafom init'
#     inputs:
#       provider: 'azurerm'
#       command: 'init'
#       workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/Azuredevops'
#       backendServiceArm: '$(azureServiceConnectionId)'
#       backendAzureRmResourceGroupName: 'Azuredevops'
#       backendAzureRmStorageAccountName: 'mydevopsblob'
#       backendAzureRmContainerName: 'tfstate'
#       backendAzureRmKey: 'myAzuredevops.terraform.tfstate'

#   - task: azure-pipeline-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#     displayName: Terraform plan 
#     inputs:
#       command: plan
#       provider: 'azurerm'
#       commandOptions: '-out="out.tfplan"'

#   - task: azure-pipeline-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@0
#     displayName: "Terraform apply"
#     inputs:
#       command: apply
#       provider: 'azurerm'
#       commandOptions: 'out.tfplan'
