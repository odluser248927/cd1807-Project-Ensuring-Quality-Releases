trigger:
- main

variables:
  azureServiceConnectionId: 'myServiceConnection'
  webAppName: 'mywebapp248927'
  vmImageName: 'ubuntu-latest'
  environmentName: 'mydevopsvm'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.9'

stages:
- stage: InfrastructureSetup
  displayName: 'Setup Infrastructure'
  jobs:
  - job: SetupInfrastructure
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: TerraformToolInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: TerraformCLI@0
      displayName: 'Initialize Terraform'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: '$(azureServiceConnectionId)'

    - task: TerraformCLI@0
      displayName: 'Apply Terraform'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve'

- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(projectRoot)
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Web App, Perform Unit Testing and Data Validation'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

          # JMeter Testing
          - script: |
              sudo apt-get update
              sudo apt-get install -y wget unzip
              wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.1.tgz
              tar -xzf apache-jmeter-5.4.1.tgz -C $(System.DefaultWorkingDirectory)
            displayName: 'Install JMeter'

          - script: |
              $(System.DefaultWorkingDirectory)/apache-jmeter-5.4.1/bin/jmeter -n -t $(System.DefaultWorkingDirectory)/YourTestPlan.jmx -l $(System.DefaultWorkingDirectory)/testResults.jtl
            displayName: 'Run JMeter Tests'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/testResults.jtl'
              searchFolder: '$(System.DefaultWorkingDirectory)'
              mergeTestResults: true
              testRunTitle: 'JMeter Test Results'

          # Newman Data Validation
          - script: |
              npm install -g newman
              newman run $(System.DefaultWorkingDirectory)/YourPostmanCollection.json -e $(System.DefaultWorkingDirectory)/YourEnvironmentFile.json
            displayName: 'Run Newman Data Validation Tests'
